<?php

namespace DocManager\DocumentBundle\Entity;

use DocManager\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
/**
 * DocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentRepository extends EntityRepository
{
    public function getDocumentWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('d');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->join('d.categories', 'c')
            ->addSelect('c')
            ->join('d.user', 'u')
            ->addSelect('u')
        ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        $qb->where($qb->expr()->in('u.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function getOutOfDateDocuments(User $user = null)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->where('d.expirationDate < :date')
            ->setParameter('date', new \DateTime());
        if(isset($user))
        {
            $qb->andWhere('d.user = :user')
                ->setParameter('user', $user);
        }
        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function getOutOfDateDocuments30Days()
    {
        $qb = $this->createQueryBuilder('d');
        $qb->where('d.expirationDate < :date')
            ->setParameter('date', new \DateTime());

    }
}
